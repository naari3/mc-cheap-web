{"version":3,"sources":["Authenticated.tsx","Loading.tsx","client.ts","Status.tsx","Banner.tsx","Boot.tsx","McName.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Authenticated","props","useGlobal","currentUser","allowed","children","className","href","process","Loading","host","getToken","a","async","token","JSON","parse","window","localStorage","fetch","mode","credentials","res","status","json","stringify","client","path","init","headers","Authorization","statusMessages","InService","Launching","Pending","Terminating","Terminated","Status","setMessage","serverStatus","setServerStatus","launching","setLaunching","updateStatusMessage","useEffect","intervalId","setInterval","clearInterval","useState","count","setCount","updateBanner","key","src","style","width","height","border","Boot","setLoading","disabled","onClick","method","McName","setCurrentUser","updating","setUpdating","onSubmit","event","preventDefault","console","log","mcUsername","body","type","defaultValue","size","onChange","target","value","App","message","name","Banner","Boolean","location","hostname","match","setGlobal","loading","user","setTimeout","error","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAiCeA,G,MA9BiB,SAAAC,GAAU,IAAD,EACjBC,oBAAU,eAAzBC,EADgC,oBAEvC,OAAOA,EACLA,EAAYC,QACV,oCAAGH,EAAMI,UAET,yBAAKC,UAAU,cACb,2BACE,uBAAGC,KAAK,+BAAR,sBADF,gHAIA,2BACE,uBAAGA,KAAK,+BAAR,sBADF,6HAOJ,2BACE,uBAAGA,KAAI,UAAKC,4BAAL,kBAAP,mECNSC,EAbW,SAAAR,GAAU,IAAD,EACfC,oBAAU,WAC5B,OAFiC,oBAG/B,yBAAKI,UAAU,WAAf,wCAEA,oCAAGL,EAAMI,WCRPK,EAAOF,4BACPG,EAAW,4BAAAC,EAAAC,OAAA,mDACXC,EAAQ,GACZA,EAAQC,KAAKC,MAAMC,OAAOC,aAAP,OAAgC,QAFpC,mCAAAN,EAAA,MAIKO,MAAM,GAAD,OAAIT,EAAJ,UAAkB,CACvCU,KAAM,OACNC,YAAa,aANF,UAQM,OAJbC,EAJO,QAQLC,OARK,mCAAAX,EAAA,MASIU,EAAIE,QATR,OASXV,EATW,OASgBA,MAC3BG,OAAOC,aAAP,MAA+BH,KAAKU,UAAUX,GAVnC,6BAYL,eAZK,iCAeRA,GAfQ,uCA8BFY,EAZA,SAAOC,EAAcC,GAArB,SAAAhB,EAAAC,OAAA,uDACRe,IACHA,EAAO,IAETA,EAAKR,KAAO,OAJC,0BAAAR,EAAA,MAOoBD,KAPpB,2DAKbiB,EAAKC,QALQ,CAMX,eAAgB,mBAChBC,cAPW,kBAAAlB,EAAA,MASAO,MAAMT,EAAOiB,EAAMC,IATnB,gFCfTG,EAAiB,CACrBC,UAAW,iCACXC,UAAW,mDACXC,QAAS,yDACTC,YAAa,uCACbC,WAAY,wCAmCCC,EAhCU,WAAO,IAAD,EACNnC,oBAAU,WAAxBoC,EADoB,sBAEWpC,oBAAU,gBAFrB,mBAEtBqC,EAFsB,KAERC,EAFQ,OAGKtC,oBAAU,aAHf,mBAGtBuC,EAHsB,KAGXC,EAHW,KAKvBC,EAAsB,4BAAA/B,EAAAC,OAAA,kEAAAD,EAAA,MACRc,EAAO,qBADC,cAEP,OADbJ,EADoB,QAElBC,QACNe,EAAW,oGAHa,WAAA1B,EAAA,MAKJU,EAAIE,QALA,OAKpBD,EALoB,OAKQA,OAM9BkB,GAAwB,cAAXlB,IACfmB,GAAa,GACbJ,EAAW,6BAEbE,EAAgBjB,GAfU,sCAwB5B,OANAqB,qBAAU,WACR,IAAMC,EAAaC,YAAYH,EAAqB,KACpD,OAAO,WACLI,cAAcF,OAGX,yBAAKvC,UAAU,UAAUyB,EAAeQ,KCdlCF,EAzBU,WAAO,IAAD,EACHW,mBAAS,GADN,mBACtBC,EADsB,KACfC,EADe,KAEvBC,EAAe,oBAAAvC,EAAAC,OAAA,gDACnBqC,EAASD,EAAQ,GADE,sCAUrB,OANAL,qBAAU,WACR,IAAMC,EAAaC,YAAYK,EAAc,KAC7C,OAAO,WACLJ,cAAcF,OAGX,yBAAKvC,UAAU,UACpB,4BACE8C,IAAKH,EACLI,IAAI,uEACJC,MAAO,CACLC,MAAO,QACPC,OAAQ,OACRC,OAAQ,YCeDC,EAjCQ,WAAO,IAAD,EACJxD,oBAAU,WAAxByD,EADkB,sBAEJzD,oBAAU,WAAxBoC,EAFkB,sBAGJpC,oBAAU,gBAA1BqC,EAHoB,sBAIOrC,oBAAU,aAJjB,mBAIpBuC,EAJoB,KAITC,EAJS,KAmB3B,OACE,yBAAKpC,UAAU,QACb,qIAEA,4BACEsD,SAA2B,eAAjBrB,GAAiCE,EAC3CoB,QAnBe,oBAAAjD,EAAAC,OAAA,uDACnB8C,GAAW,GADQ,WAAA/C,EAAA,MAEDc,EAAO,QAAS,CAChCoC,OAAQ,UAHS,OAKA,MALA,OAKXvC,QACNe,EAAW,+FACXI,GAAa,IAEbJ,EAAW,sEAEbqB,GAAW,GAXQ,uCAiBjB,wBC6BSI,G,MAlDU,WAAO,IAAD,EACS7D,oBAAU,eADnB,mBACtBC,EADsB,KACT6D,EADS,OAEN9D,oBAAU,WAAxBoC,EAFoB,sBAGGU,oBAAS,GAHZ,mBAGtBiB,EAHsB,KAGZC,EAHY,KA0B7B,OACE,yBAAK5D,UAAU,UACb,iPAGA,+KACA,0BAAM6D,SA3BW,SACnBC,GADmB,eAAAxD,EAAAC,OAAA,uDAGnBuD,EAAMC,iBACNH,GAAY,GACZI,QAAQC,IAAI,CAAEC,WAAYrE,EAAYqE,aACtClC,EAAW,gEANQ,WAAA1B,EAAA,MAODc,EAAO,QAAS,CAChCoC,OAAQ,MACRW,KAAM1D,KAAKU,UAAU,CAAE+C,WAAYrE,EAAYqE,gBAT9B,OAWA,OAJblD,EAPa,QAWXC,OACNe,EAAW,0GACa,MAAfhB,EAAIC,OACbe,EAAW,oJAEXA,EAAW,gKAEb4B,GAAY,GAlBO,uCA2BjB,IAEE,2BACEQ,KAAK,OACLC,aAAcxE,EAAYqE,WAC1BI,KAAM,GACNtE,UAAU,eACVuE,SAAU,SAACT,GACTjE,EAAYqE,WAAaJ,EAAMU,OAAOC,MACtCf,EAAe7D,MAGnB,4BAAQyD,SAAUK,GAAlB,gCCaOe,EApDO,WAAO,IAAD,EACJ9E,oBAAU,eAAzBC,EADmB,sBAERD,oBAAU,WAArB+E,EAFmB,sBAGH/E,oBAAU,gBAA1BqC,EAHmB,oBAK1B,OACE,yBAAKjC,UAAU,OACb,gFAEA,4HAEA,kBAAC,EAAD,KACE,kBAAC,EAAD,KACGH,EACC,oCACE,2BAAIA,EAAY+E,KAAhB,8CAEA,mHACA,uBAAG3E,KAAMC,8BACNA,8BAGH,8DACA,kBAAC,EAAD,MACA,kBAAC2E,EAAD,MACkB,cAAjB5C,EACC,oCACE,gFACA,kBAAC,EAAD,OAGF,qCAEF,8DACA,kBAAC,EAAD,OAGF,oCACE,2BACE,uBAAGhC,KAAI,UAAKC,4BAAL,kBAAP,mEAOR,2BAAIyE,MC5CQG,QACW,cAA7BnE,OAAOoE,SAASC,UAEe,UAA7BrE,OAAOoE,SAASC,UAEhBrE,OAAOoE,SAASC,SAASC,MACvB,2D,MCFNC,oBAAU,CAAEC,SAAS,IAErB,WAAC,YAAA7E,EAAAC,OAAA,2EAAAD,EAAA,MAGqBc,EAAO,UAH5B,UAIsB,OADbJ,EAHT,QAIWC,OAJX,kCAAAX,EAAA,MAKwBU,EAAIE,QAL5B,OAKWA,EALX,OAMKkE,EAAOlE,EAAKkE,KANjB,OASGC,YAAW,0BAAA/E,EAAAC,OAAA,uDACH8B,EAAsB,0BAAA/B,EAAAC,OAAA,kEAAAD,EAAA,MAGRc,EAAO,qBAHC,cAGpBJ,EAHoB,kBAAAV,EAAA,MAIZU,EAAIE,QAJQ,uCAIAD,QAJA,sCADnB,KAWTiE,YAXS,KAYME,GAAQ,KAZd,WAAA9E,EAAA,MAca+B,KAdb,yBAYPxC,YAZO,KAaPsF,SAAS,EACTlD,aAdO,4DAgBR,KAzBN,kDA2BG+B,QAAQsB,MAAR,MACAtB,QAAQC,IAAI,wBACZiB,oBAAU,CACRrF,YAAa,KACbsF,SAAS,EACTlD,aAAc,eAhCnB,yDAAD,GAqCAsD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiF3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b29611b0.chunk.js","sourcesContent":["import React, { useGlobal } from \"reactn\";\nimport PropTypes from \"prop-types\";\n\nconst Authenticated: React.FC = props => {\n  const [currentUser] = useGlobal(\"currentUser\");\n  return currentUser ? (\n    currentUser.allowed ? (\n      <>{props.children}</>\n    ) : (\n      <div className=\"NotAllowed\">\n        <p>\n          <a href=\"https://twitter.com/_naari_\">なあり</a>\n          のフォロワーしか触れません（；＿；）\n        </p>\n        <p>\n          <a href=\"https://twitter.com/_naari_\">なあり</a>\n          にフォローしてもらってください（；＿；）\n        </p>\n      </div>\n    )\n  ) : (\n    <p>\n      <a href={`${process.env.REACT_APP_API_HOST}/auth/twitter`}>\n        ログインしてください\n      </a>\n    </p>\n  );\n};\n\nAuthenticated.propTypes = {\n  children: PropTypes.node\n};\n\nexport default Authenticated;\n","import React, { useGlobal } from \"reactn\";\nimport PropTypes from \"prop-types\";\n\nconst Loading: React.FC = props => {\n  const [loading] = useGlobal(\"loading\");\n  return loading ? (\n    <div className=\"Loading\">ろーでぃんぐ</div>\n  ) : (\n    <>{props.children}</>\n  );\n};\n\nLoading.propTypes = {\n  children: PropTypes.node\n};\n\nexport default Loading;\n","const host = process.env.REACT_APP_API_HOST;\nconst getToken = async (): Promise<string> => {\n  let token = \"\";\n  token = JSON.parse(window.localStorage[\"token\"] || \"null\");\n  if (!token) {\n    const res = await fetch(`${host}/token`, {\n      mode: \"cors\",\n      credentials: \"include\"\n    });\n    if (res.status === 200) {\n      token = (await res.json()).token;\n      window.localStorage[\"token\"] = JSON.stringify(token);\n    } else {\n      throw \"token failed\";\n    }\n  }\n  return token;\n};\n\nconst client = async (path: string, init?: RequestInit): Promise<Response> => {\n  if (!init) {\n    init = {};\n  }\n  init.mode = \"cors\";\n  init.headers = {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${await getToken()}`\n  };\n  return await fetch(host + path, init);\n};\n\nexport default client;\n","import React, { useEffect, useGlobal } from \"reactn\";\nimport client from \"./client\";\n\n// \"Pending\" | \"InService\" | \"Terminating\" | \"Terminated\"\nconst statusMessages = {\n  InService: \"やってます\",\n  Launching: \"もうちょっとです\",\n  Pending: \"たててるところです\",\n  Terminating: \"おとしてます\",\n  Terminated: \"やってません\"\n};\n\nconst Status: React.FC = () => {\n  const [, setMessage] = useGlobal(\"message\");\n  const [serverStatus, setServerStatus] = useGlobal(\"serverStatus\");\n  const [launching, setLaunching] = useGlobal(\"launching\");\n\n  const updateStatusMessage = async (): Promise<void> => {\n    const res = await client(\"/instance_status\");\n    if (res.status !== 200) {\n      setMessage(\"なんかおかしい、連絡してください\");\n    }\n    const status = (await res.json()).status as\n      | \"InService\"\n      | \"Launching\"\n      | \"Pending\"\n      | \"Terminating\"\n      | \"Terminated\";\n    if (launching && status === \"InService\") {\n      setLaunching(false);\n      setMessage(\"たった！\");\n    }\n    setServerStatus(status);\n  };\n\n  useEffect(() => {\n    const intervalId = setInterval(updateStatusMessage, 7000);\n    return (): void => {\n      clearInterval(intervalId);\n    };\n  });\n  return <div className=\"Status\">{statusMessages[serverStatus]}</div>;\n};\n\nexport default Status;\n","import React, { useEffect, useState } from \"reactn\";\n\nconst Status: React.FC = () => {\n  const [count, setCount] = useState(0);\n  const updateBanner = async (): Promise<void> => {\n    setCount(count + 1);\n  };\n\n  useEffect(() => {\n    const intervalId = setInterval(updateBanner, 7000);\n    return (): void => {\n      clearInterval(intervalId);\n    };\n  });\n  return <div className=\"Banner\">\n    <iframe\n      key={count}\n      src=\"https://mc.erinn.biz/intl/polling.html.php?server_addr=mc.naari3.net\"\n      style={{\n        width: \"300px\",\n        height: \"60px\",\n        border: \"none\"\n      }}\n    ></iframe>\n  </div>;\n};\n\nexport default Status;\n","import React, { useGlobal } from \"reactn\";\nimport client from \"./client\";\n\nconst Boot: React.FC = () => {\n  const [, setLoading] = useGlobal(\"loading\");\n  const [, setMessage] = useGlobal(\"message\");\n  const [serverStatus] = useGlobal(\"serverStatus\");\n  const [launching, setLaunching] = useGlobal(\"launching\");\n\n  const launchServer = async (): Promise<void> => {\n    setLoading(true);\n    const res = await client(\"/boot\", {\n      method: \"POST\"\n    });\n    if (res.status === 200) {\n      setMessage(\"たちあげます、2分くらいまってて\");\n      setLaunching(true);\n    } else {\n      setMessage(\"失敗しました…なんで…\");\n    }\n    setLoading(false);\n  };\n  return (\n    <div className=\"Boot\">\n      <p>落ちてる時にきどうするためのボタン</p>\n\n      <button\n        disabled={serverStatus !== \"Terminated\" || launching}\n        onClick={launchServer}\n      >\n        きどう\n      </button>\n    </div>\n  );\n};\n\nexport default Boot;\n","import React, { useGlobal, useState } from \"reactn\";\nimport client from \"./client\";\n\nimport \"./McName.css\";\n\nconst McName: React.FC = () => {\n  const [currentUser, setCurrentUser] = useGlobal(\"currentUser\");\n  const [, setMessage] = useGlobal(\"message\");\n  const [updating, setUpdating] = useState(false);\n\n  const handleSubmit = async (\n    event: React.FormEvent<HTMLFormElement>\n  ): Promise<void> => {\n    event.preventDefault();\n    setUpdating(true);\n    console.log({ mcUsername: currentUser.mcUsername });\n    setMessage(\"こうしんしています…\");\n    const res = await client(\"/user\", {\n      method: \"PUT\",\n      body: JSON.stringify({ mcUsername: currentUser.mcUsername })\n    });\n    if (res.status === 200) {\n      setMessage(\"ユーザー名こうしんしました！！！！\");\n    } else if (res.status === 403) {\n      setMessage(\"サーバーがたってるときに実行してください！！！！\");\n    } else {\n      setMessage(\"ユーザー名こうしんできませんでした…伝えてください…\");\n    }\n    setUpdating(false);\n  };\n\n  return (\n    <div className=\"McName\">\n      <p>\n        マイクラでつかってるユーザー名をいれてから「こうしん」をおしてください\n      </p>\n      <p>これによってホワリスにユーザー名が追加されるはず</p>\n      <form onSubmit={handleSubmit}>\n        @\n        <input\n          type=\"text\"\n          defaultValue={currentUser.mcUsername}\n          size={16}\n          className=\"McName-Input\"\n          onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n            currentUser.mcUsername = event.target.value;\n            setCurrentUser(currentUser);\n          }}\n        />\n        <button disabled={updating}>こうしん</button>\n      </form>\n    </div>\n  );\n};\n\nexport default McName;\n","import React, { useGlobal } from \"reactn\";\nimport \"./App.css\";\n\nimport Authenticated from \"./Authenticated\";\nimport Loading from \"./Loading\";\nimport Status from \"./Status\";\nimport Banner from \"./Banner\";\nimport Boot from \"./Boot\";\nimport McName from \"./McName\";\n\nconst App: React.FC = () => {\n  const [currentUser] = useGlobal(\"currentUser\");\n  const [message] = useGlobal(\"message\");\n  const [serverStatus] = useGlobal(\"serverStatus\");\n\n  return (\n    <div className=\"App\">\n      <h1>まいくらさーばー</h1>\n\n      <p>まいくらサーバー mc.naari3.net のコンパネ</p>\n\n      <Loading>\n        <Authenticated>\n          {currentUser ? (\n            <>\n              <p>{currentUser.name}さんこんにちは</p>\n\n              <p>でぃすこーどさーばーあります</p>\n              <a href={process.env.REACT_APP_DISCORD_INVITE_URL}>\n                {process.env.REACT_APP_DISCORD_INVITE_URL}\n              </a>\n\n              <h2>すてーたす</h2>\n              <Status />\n              <Banner />\n              {serverStatus === \"InService\" ? (\n                <>\n                  <h2>まいくらのなまえ</h2>\n                  <McName />\n                </>\n              ) : (\n                <></>\n              )}\n              <h2>たちあげる</h2>\n              <Boot />\n            </>\n          ) : (\n            <>\n              <p>\n                <a href={`${process.env.REACT_APP_API_HOST}/auth/twitter`}>\n                  ログインしてください\n                </a>\n              </p>\n            </>\n          )}\n        </Authenticated>\n        <p>{message}</p>\n      </Loading>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister(): void {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { setGlobal } from \"reactn\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport client from \"./client\";\n\nimport { UserType } from \"./types/userType\";\n\nimport addReactNDevTools from \"reactn-devtools\";\n\nif (process.env.NODE_ENV !== \"production\") {\n  addReactNDevTools();\n}\n\nsetGlobal({ loading: true });\n\n(async (): Promise<void> => {\n  let user!: UserType;\n  try {\n    const res = await client(\"/user\");\n    if (res.status === 200) {\n      const json = await res.json();\n      user = json.user as UserType;\n    }\n\n    setTimeout(async () => {\n      const updateStatusMessage = async (): Promise<\n        \"Pending\" | \"InService\" | \"Terminating\" | \"Terminated\"\n      > => {\n        const res = await client(\"/instance_status\");\n        return (await res.json()).status as\n          | \"Pending\"\n          | \"InService\"\n          | \"Terminating\"\n          | \"Terminated\";\n      };\n      setGlobal({\n        currentUser: user || null,\n        loading: false,\n        serverStatus: await updateStatusMessage()\n      });\n    }, 1000);\n  } catch (error) {\n    console.error(error);\n    console.log(\"may be not logged in\");\n    setGlobal({\n      currentUser: null,\n      loading: false,\n      serverStatus: \"Terminated\"\n    });\n  }\n})();\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}